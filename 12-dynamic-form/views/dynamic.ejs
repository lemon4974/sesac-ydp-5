<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <!-- axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>동적 폼 연습하기</h1>
    <form name="register">
      <label for="name">이름</label>
      <input type="text" name="name" id="name" required />
      <br />

      <fieldset>
        <legend>성별</legend>
        <input type="radio" name="gender" id="male" value="m" required />
        <!--  -->
        <label for="male">남</label>
        <input type="radio" name="gender" id="female" value="f" />
        <label for="female">여</label>
      </fieldset>
      <br />

      <button type="button" onclick="ajaxGet()">Ajax Get 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax Post 제출</button>
      <br />

      <button type="button" onclick="axiosGet()">
        Axios Get 제출 (+ form validation)
      </button>
      <button type="button" onclick="axiosPost()">Axios Post 제출</button>
      <br />

      <button type="button" onclick="fetchGet()">fetch Get 제출</button>
      <button type="button" onclick="fetchPost()">fetch Post 제출</button>
      <br />
    </form>
    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>

    <hr />
    <h1>OPEN API를 이용해 고양이 사진 랜덤 돌리기!</h1>
    <button onclick="changeImg()">랜덤</button>
    <br />
    <img
      width="500"
      height="500"
      src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png"
      alt="고양이"
    />

    <script>
      // frondtend javascript폼 선택, 정보 꺼내오기...
      const resultBox = document.querySelector('div.result');

      const img = document.querySelector('img');

      async function changeImg() {
        const res = await axios({
          method: 'get',
          url: 'https://api.thecatapi.com/v1/images/search',
        });
        const { data } = res;
        console.log(res);
        img.src = data[0].url; //img 태그의 src 속성을 open api에서 받아온 랜덤 이미지 생성
      }

      function ajaxGet() {
        console.log('ajaxGet 함수 호출!');

        // 폼 선택
        const form = document.forms['register'];

        // 폼 객체 요소 확인
        console.dir(form);
        console.dir(form.name);
        console.dir(form.gender);
        console.dir(form.name.value); // 이름 input에 입력한 값
        console.dir(form.gender.value); //성별 radio input을 선택한 값

        // 요청에 실어서 보낼 데이터 변수(서버에서 받을 정보)
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버 Get 요청 보내기(by jquery)
        //아래는 공식 문서의 format
        $.ajax({
          type: 'get', //요청의 종류(= form의 method 속성)
          url: '/ajax', //요청의 경로(=form의 action 속성)
          data: data, //요청에 실어보낼 데이터(서버가 받게 될 데이터)
          success: function (data) {
            // 요청이 성공적으로 수행되었을 때 실행할 함수
            console.log(data);
            resultBox.textContent = `GET /ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠?`;
            // 퀴즈
            // div.result 선택해서
            // 서버로 받은 data값을 div result로 표현
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; //서버로 보낼 데이터 생성

        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST /ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠?`;
          },
        });
      }

      async function axiosGet() {
        console.log('axiosGet 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        console.log(form.name.checkValidity());
        // 같은 name으로 묶인 radio btn은 하나만 선택되더라도 true를 반환
        console.log(form.gender[0].checkValidity());
        console.log(form.gender[1].checkValidity());

        // axios 요청의 결과는 Promise 객체
        // -> then, catch 메서드로 체이닝이 가능!
        // -> async, await 도 사용할 수 있음!
        // axios는 jquery를 사용하지 않기에 순수 js 로 작성
        // axios({
        //   // method: 'get', // 요청 방식(= form method 속성)
        //   // url: '/axios', // 요청 방식(= form action 속성)
        //   // params: data, // (차이점) 서버로 보낼 데이터 (query string)

        //   // params키를 사용하지 않고 query string 을 직접 정의해서 요청을 보낼 수 있음 (위와 동일)
        //   method: 'get', // 요청 방식(= form method 속성)
        //   url: `/axios?name=${form.name.value}&gender=${form.gender.value}`, // 요청 방식(= form action 속성)
        // })
        //   .then(function (response) {
        //     // console.log(response); // 서버의 응답 결과
        //     // console.log(response.data); //서버의 응답 데이터를 확인
        //     // 퀴즈 1. 객체 구조 분해
        //     const { name, gender } = data;
        //     console.log(name);
        //     console.log(gender);
        //     resultBox.textContent = `GET / axios 요청 완료!! ${form.name.value}님은 ${form.gender.value}이시죠`;
        //   })
        //   .catch(function (error) {
        //     console.log('Error', error);
        //   });

        // 퀴즈 2. axios 요청 처리 async/await 로 변경

        // 데이터가 오고 가기에 시간이 걸림
        try {
          // 폼 유효성 검사
          // name input에 입력된 값이 없다면, '이름을 입력해주세요!'
          // gender radio btn을 선택하지 않았다면, '성별을 선택해주세요!'
          // 둘 다 입력이 잘 되었다면, axios로 back에 요청 날리기

          if (!form.name.checkValidity()) {
            // !false
            resultBox.textContent = `이름을 입력해주세요!`;
            return;
          } else if (!form.gender[0].checkValidity()) {
            resultBox.textContent = `성별을 선택해주세요!`;
          } else {
            const response = await axios({
              method: 'get',
              url: '/axios',
              params: data, //axios GET은 params
            }); // response: 서버의 응답 결과
            const { name, gender } = response.data;
            resultBox.textContent = `GET /axios 요청 완료 ${name}님은 ${gender}이시죠?`;
          }
        } catch (error) {
          console.log('Error', error);
          resultBox.textContent = `알 수 없는 에러 발생! 다시 시도해주세요`;
          console.log('Error!', error);
        }
      }

      // promise
      // function axiosPost() {
      //   console.log('axiosPost 함수 호출!');

      //   const form = document.forms['register'];
      //   const data = {
      //     name: form.name.value,
      //     gender: form.gender.value,
      //   };

      //   axios({
      //     method: 'post',
      //     url: '/axios',
      //     data: data,
      //   })
      //     .then((response) => {
      //       console.log(response);
      //       const { name, gender } = response.data; // 객체 구조분해 할당
      //       resultBox.textContent = `POST /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
      //     })
      //     .catch((error) => {
      //       console.log('Error!', error);
      //     });
      // }

      async function axiosPost() {
        console.log('axiosPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // axios({
        //   method: 'post',
        //   url: `/axios`,
        // })
        //   .then(function (response) {
        //     const { name, gender } = data;
        //     console.log(name);
        //     console.log(gender);
        //     resultBox.textContent = `GET / axios 요청 완료!! ${form.name.value}님은 ${form.gender.value}이시죠`;
        //   })
        //   .catch(function (error) {
        //     console.log('Error', error);
        //   });

        // async/await 로 변경
        try {
          const response = await axios({
            method: 'post',
            url: '/axios',
            data: data, //axios POST는 data로
          }); // response: 서버의 응답 결과
          const { name, gender, msg } = response.data; // 객체 구조분해 할당
          resultBox.textContent = `POST /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ ${msg}`;
        } catch (error) {
          console.log('Error', error);
          resultBox.textContent = `알 수 없는 에러 발생! 다시 시도해주세요`;
          console.log('Error!', error);
        }
      }

      // fetch(url, options)
      function fetchGet() {
        console.log('fetchGet 함수 호출!');

        const form = document.forms['register'];
        // fetch(`/fetch, {method: get}`);
        // fetch는 default로 get 방식으로 작동 options를 생략 가능
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`)
          .then(function (response) {
            console.log(response);
            return response.json(); // (차이점)
            // JSON 형태로 응답 데이터를 전달받음. 응답(response) 객체는 json() 메서드를 제공
            // 응답(response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체(js obj)로 변환
          })
          .then(function (data) {
            //data 변수 => 직전 then 메서드의 리턴값: response.json()
            console.log(data);
            resultBox.textContent = `GET /fetch 요청 완료 ${data.name}님은 ${data.gender}이시죠?`;
          });
      }

      function fetchPost() {
        console.log('fetchPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; //서버에 넘겨줄 데이터

        //fetch를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
        // 1. method 키 post 지정
        // 2. headers 키 JSON 포맷 사용 선언
        // 3. body 키 서버로 보낼 데이터

        fetch('/fetch', {
          method: 'POST',
          header: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          // data: js obj
          // JSON.stringify(data): js obj -> json
        })
          .then((response) => {
            console.log(response);
            return response.json();
          })
          .then((response) => {
            console.log(data);
            resultBox.textContent = `GET /fetch 요청 완료 ${data.name}님은 ${data.gender}이시죠?`;
          });
      }
    </script>
  </body>
</html>
