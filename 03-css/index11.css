/* container가 flex 부모 요소 */
.container {
    width: 300px;
    height: 400px;
    background-color: #333;
    /* margin 좌우 방향 가운데 배치의 명령어, width가 설정되어 있어야 의미가 있다 */
    margin: 0 auto;

    display: flex;
    /* 부모 요소에 "flex"를 선언하면 아이템(자식 요소)이 가로 방향으로 배치 */

    /* 
        flexbox 기본 용어
        - 주축(main axis): 아이템의 배치 방향, 가로 세로 둘 중 하나
        - 교차축(cross axis): 주축의 수직축
    
    */

    /* 
        flex-direction: flex 방향을 설정 (주축 방향 설정)
        row (default): 수평 정렬(좌 -> 우)
        row-reverse: 수평 정렬(우 ->좌)
        column: 수직 정렬(위 -> 아래)
        column-reverse: 수직 정렬(아래 -> 위)
    */

    /* row일 때 */
    /* flex-direction: row; */
    /* flex-direction: row-reverse; */
    /* column 때 */
    /* flex-direction: column; */
    /* flex-direction: column-reverse; */

    /* justify-content: 주축아이템을 어떻게 배치할 것인지?
        - flex-direction이 수평 정렬;주축 = row(가로)
        - flex-direction이 수직 정렬;주축 = column(세로)
        - space between 주로 많이 사용

        - flex-start (default): 아이템을 주축에 대해서 start지점을 기준으로 나열 
        - flex-end: 아이템을 주축에 대해서 end 지점을 기준으로 나열
        - space-between: 처음과 마지막 아이템을 양 끝에 붙이고, 나머지 영역 공평하게 나눔
        - space-around: 아이템들의 모든 여백을 공평하게 갖도록 함 (양끝 영역의 단위가 1이라면, 나머지 영역의 단위는 2)
        - space-evenly: start부터 첫 아이템의 간격, 아이템 끼리의 간격, 마지막 아이템 부터 end 까지의 모든 간격이 일정
    */

    /* justify-content: flex-start; */
    /* justify-content: flex-end; */
    /* justify-content: space-between; */
    /* justify-content: space-around; */
    /* justify-content: space-evenly; */

    /* align-items: 교차축에 대해서 아이템을 어떻게 배치할 것인지? 
        - flex-direction이 수평 정렬; 교차축 = column (세로)
        - flex-direction이 수직 정렬; 교차축 = row (가로)

        - stretch (default): container의 교차축을 채우기 위해 늘림
            - 현재 .flex-items 에 width, height 값이 있어 늘어나지는 않음
        - flex-start: 교차축에 대하여 시작점으로 정렬
        - flex-end: 교차축에 대하여 끝점으로 정렬
        - center: 교차축에 대하여 가운데 정렬
        - baseline: 아이템을 텍스트의 베이스라인을 기준 정렬
    */
    
    /* align-items: stretch;  */
    /* align-items: flex-start; */
    /* align-items: flex-end; */
    /* align-items: center; */
    /* align-items: baseline; */
    /* baseline: 글자에 밑줄을 그었을때 나타나는 선을 baseline. 글자 크기가 다르면 차이가 나타난다. */
    /*flex-direction: column;, 과 align-items: center; 같이 많이 사용  */

    /* flex-wrap: 줄바꿈 (개행) 처리
    -> 컨테이너(부모)가 한 줄에 아이템을 다 수용하지 못할 때, 줄바꿈 관련 설정
    - nowrap(default): 줄바꿈 안함
    - wrap: 줄바꿈
    - wrap-reverse: 줄바꿈 하는데 아이템을 역순 배치
    */

    /* flex-wrap:nowrap; */
    /* flex-wrap: wrap; */
    /* flex-wrap: wrap-reverse; */

    /* align-content: 여러 행에 대한 정렬
        (조건)flex-wrap: wrap or wrap-reverse 상태에서 아이템이 두 줄 이상일 때 수직축 방향 설정함
    */
    /* align-content: stretch; */
    /* align-content: flex-start; */
    /* align-content: flex-end; */
    /* align-content: center; */
    /* align-content: space-between; */
    /* align-content: space-around; */
    /* align-content: space-evenly; */
    /* 헤더 만들 때도 많이 씀, 쇼핑몰의 많은 카드도 flex 사용해서 정렬, 큰 레이아웃에 대하여 사용 */




}
/* items가 flex 자식 요소 */
.items {
    width: 100px;
    height: 100px;
    font-size: 20px;
    text-align: center;
    /* 위 아래에 대해서도 가운데 오게 하는 것 */
    /* height와 line-height값이 일치해야 가운데 */
    line-height: 100px;
}

.item1{
    background-color: blue;

}

.item2{
    background-color: purple;

}

.item3{
    background-color: pink;

}

.item4{
    background-color: red;

}

.item5{
    background-color: grey;

}

/* div 안에 div 정가운데 배치 */
/* ver1. position, transform */
.outer{
    width: 300px;
    height: 300px;
    background-color: salmon;

}
.inner{
    width: 100px;
    height: 100px;
    background-color: wheat;

}

.outer{
    position: relative;
    /* outer div의 정가운데를 원하므로 부모 요소인 outer에 position 부여 */
}

.inner1{

    position: absolute;
    top:50%;
    left:50%;
    /* 자기가 가진 크기의 절반만큼의 마이너스 방향으로 이동 */
    transform: translate(-50%, -50%)
}



/* ver2. flex */
.outer2{
    display: flex;
    justify-content: space-around;
    align-items: center;
}

.parent{
    width: 100%;
    height: 100px;
    background-color: #333;
}
.


